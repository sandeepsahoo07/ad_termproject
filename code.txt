import java.util.*;

public class TelephoneNetworkRouting {
    
    private static final int INFINITY = Integer.MAX_VALUE;

    public static void main(String[] args) {
        // Create a graph
        int[][] graph = {
            {0, 2, 4, 0, 0, 0},
            {2, 0, 1, 4, 2, 0},
            {4, 1, 0, 0, 3, 0},
            {0, 4, 0, 0, 3, 1},
            {0, 2, 3, 3, 0, 2},
            {0, 0, 0, 1, 2, 0}
        };
        int source = 0; // Source vertex
        
        int[] shortestDistances = dijkstra(graph, source);
        
        // Print the shortest distances from the source to all vertices
        System.out.println("Shortest distances from source vertex " + source + ":");
        for (int i = 0; i < shortestDistances.length; i++) {
            System.out.println("Vertex " + i + ": " + shortestDistances[i]);
        }
    }
    
    public static int[] dijkstra(int[][] graph, int source) {
        int numVertices = graph.length;
        int[] shortestDistances = new int[numVertices]; // Array to store shortest distances
        boolean[] visited = new boolean[numVertices]; // Array to track visited vertices
        
        // Initialize the shortest distances and visited array
        for (int i = 0; i < numVertices; i++) {
            shortestDistances[i] = INFINITY;
            visited[i] = false;
        }
        
        shortestDistances[source] = 0; // Set distance of source vertex to 0
        
        for (int count = 0; count < numVertices - 1; count++) {
            int minDistanceVertex = getMinDistanceVertex(shortestDistances, visited);
            visited[minDistanceVertex] = true; // Mark the vertex as visited
            
            // Update the distances of adjacent vertices
            for (int v = 0; v < numVertices; v++) {
                if (!visited[v] && graph[minDistanceVertex][v] != 0 &&
                        shortestDistances[minDistanceVertex] != INFINITY &&
                        shortestDistances[minDistanceVertex] + graph[minDistanceVertex][v] < shortestDistances[v]) {
                    shortestDistances[v] = shortestDistances[minDistanceVertex] + graph[minDistanceVertex][v];
                }
            }
        }
        
        return shortestDistances;
    }
    
    public static int getMinDistanceVertex(int[] shortestDistances, boolean[] visited) {
        int minDistance = INFINITY;
        int minDistanceVertex = -1;
        
        for (int v = 0; v < shortestDistances.length; v++) {
            if (!visited[v] && shortestDistances[v] < minDistance) {
                minDistance = shortestDistances[v];
                minDistanceVertex = v;
            }
        }
        
        return minDistanceVertex;
    }
}
